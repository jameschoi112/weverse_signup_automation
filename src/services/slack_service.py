"""
Slack ÏïåÎ¶º ÏÑúÎπÑÏä§
"""
import asyncio
import ssl
from datetime import datetime
from typing import Optional
import aiohttp
from config.settings import SLACK_SETTINGS
from models.account import AccountInfo


class SlackService:
    """Slack ÏõπÌõÖÏùÑ Ïù¥Ïö©Ìïú ÏïåÎ¶º ÏÑúÎπÑÏä§"""

    def __init__(self, webhook_url: str = None):
        self.webhook_url = webhook_url or SLACK_SETTINGS["default_webhook_url"]
        self.timeout = SLACK_SETTINGS["timeout"]

    async def send_verification_link(self, verification_link: str, email: str) -> bool:
        """Ïù∏Ï¶ù ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú Î≤ÑÌäºÏúºÎ°ú Ï†ÑÏÜ°"""
        if not self.webhook_url:
            print(f"[SLACK] Ïù∏Ï¶ù ÎßÅÌÅ¨: {verification_link}")
            return False

        try:
            slack_data = {
                "text": "üîî ÏúÑÎ≤ÑÏä§ Ïù¥Î©îÏùº Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§!",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*[Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏöîÏ≤≠]*\n\n"
                                    f"Í≥ÑÏ†ï: `{email}`\n"
                                    f"ÏïÑÎûò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Ïù¥Î©îÏùº Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî."
                        }
                    },
                    {
                        "type": "actions",
                        "elements": [
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "Ïù¥Î©îÏùº Ïù∏Ï¶ùÌïòÍ∏∞",
                                    "emoji": True
                                },
                                "style": "primary",
                                "url": verification_link,
                                "action_id": "email_verification"
                            }
                        ]
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": f"ÏöîÏ≤≠ ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            }
                        ]
                    }
                ]
            }

            success = await self._send_message(slack_data)
            if success:
                print(f"[SLACK] Ïù∏Ï¶ù ÎßÅÌÅ¨ Ï†ÑÏÜ° ÏÑ±Í≥µ: {email}")
                print(f"[SLACK] Î≤ÑÌäº ÌÅ¥Î¶≠ÏúºÎ°ú Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî!")

            return success

        except Exception as e:
            print(f"[SLACK] Ïù∏Ï¶ù ÎßÅÌÅ¨ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò: {e}")
            return False

    async def send_notification(self, message: str, account_info: AccountInfo) -> bool:
        """ÏùºÎ∞ò ÏïåÎ¶º Î∞úÏÜ°"""
        if not self.webhook_url:
            print(f"[SLACK] {message}")
            return False

        try:
            slack_data = {
                "text": "üîî ÏúÑÎ≤ÑÏä§ Í≥ÑÏ†ï ÏÉùÏÑ± ÏïåÎ¶º",
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*{message}*\n\n"
                                    f"Ïù¥Î©îÏùº: `{account_info.email}`\n"
                                    f"ÎπÑÎ∞ÄÎ≤àÌò∏: `{account_info.password}`\n"
                                    f"ÎãâÎÑ§ÏûÑ: `{account_info.nickname}`\n"
                                    f"ÌôòÍ≤Ω: `{account_info.environment.upper()}`\n"
                                    f"ÏÉùÏÑ±ÏãúÍ∞Ñ: `{account_info.created_at}`"
                        }
                    }
                ]
            }

            success = await self._send_message(slack_data)
            if success:
                print(f"[SLACK] ÏïåÎ¶º Î∞úÏÜ° ÏÑ±Í≥µ: {account_info.email}")

            return success

        except Exception as e:
            print(f"[SLACK] ÏïåÎ¶º Î∞úÏÜ° Ï§ë Ïò§Î•ò: {e}")
            return False

    async def send_success_notification(self, account_info: AccountInfo) -> bool:
        """Í≥ÑÏ†ï ÏÉùÏÑ± ÏÑ±Í≥µ ÏïåÎ¶º"""
        message = "Í≥ÑÏ†ï ÏÉùÏÑ± ÏôÑÎ£å"

        if not self.webhook_url:
            print(f"[SLACK] {message}: {account_info.email}")
            return False

        try:
            slack_data = {
                "text": "‚úÖ ÏúÑÎ≤ÑÏä§ Í≥ÑÏ†ï ÏÉùÏÑ± ÏôÑÎ£å!",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "[Í≥ÑÏ†ï ÏÉùÏÑ± ÏôÑÎ£å]"
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": f"*ID(Ïù¥Î©îÏùº):*\n`{account_info.email}`"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*PW:*\n`{account_info.password}`"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*WID:*\n`{account_info.wid or 'N/A'}`"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÌôòÍ≤Ω:*\n`{account_info.environment.upper()}`"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÏôÑÎ£åÏãúÍ∞Ñ:*\n`{account_info.updated_at}`"
                            }
                        ]
                    }
                ]
            }

            success = await self._send_message(slack_data)
            if success:
                print(f"[SLACK] ÏÑ±Í≥µ ÏïåÎ¶º Î∞úÏÜ°: {account_info.email}")

            return success

        except Exception as e:
            print(f"[SLACK] ÏÑ±Í≥µ ÏïåÎ¶º Î∞úÏÜ° Ï§ë Ïò§Î•ò: {e}")
            return False

    async def send_error_notification(self, error_message: str, account_info: AccountInfo) -> bool:
        """ÏóêÎü¨ ÏïåÎ¶º Î∞úÏÜ°"""
        if not self.webhook_url:
            print(f"[SLACK] ERROR: {error_message}")
            return False

        try:
            slack_data = {
                "text": "‚ùå ÏúÑÎ≤ÑÏä§ Í≥ÑÏ†ï ÏÉùÏÑ± Ïã§Ìå®",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "‚ùå Í≥ÑÏ†ï ÏÉùÏÑ± Ïã§Ìå®"
                        }
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Ïò§Î•ò ÎÇ¥Ïö©:*\n{error_message}\n\n"
                                    f"*Í≥ÑÏ†ï Ï†ïÎ≥¥:*\n"
                                    f"Ïù¥Î©îÏùº: `{account_info.email}`\n"
                                    f"ÏÉÅÌÉú: `{account_info.status}`\n"
                                    f"ÌôòÍ≤Ω: `{account_info.environment.upper()}`"
                        }
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": f"Ïã§Ìå® ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            }
                        ]
                    }
                ]
            }

            success = await self._send_message(slack_data)
            if success:
                print(f"[SLACK] ÏóêÎü¨ ÏïåÎ¶º Î∞úÏÜ°: {account_info.email}")

            return success

        except Exception as e:
            print(f"[SLACK] ÏóêÎü¨ ÏïåÎ¶º Î∞úÏÜ° Ï§ë Ïò§Î•ò: {e}")
            return False

    async def send_bulk_summary(self, total_count: int, success_count: int, failed_count: int,
                                environment: str) -> bool:
        """ÏùºÍ¥Ñ ÏÉùÏÑ± Í≤∞Í≥º ÏöîÏïΩ ÏïåÎ¶º"""
        if not self.webhook_url:
            return False

        try:
            success_rate = (success_count / total_count * 100) if total_count > 0 else 0

            # ÏÑ±Í≥µÎ•†Ïóê Îî∞Î•∏ Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù
            if success_rate == 100:
                status_emoji = "üéâ"
                status_text = "ÏôÑÎ≤Ω!"
            elif success_rate >= 80:
                status_emoji = "‚úÖ"
                status_text = "ÏÑ±Í≥µ"
            elif success_rate >= 50:
                status_emoji = "‚ö†Ô∏è"
                status_text = "Î∂ÄÎ∂Ñ ÏÑ±Í≥µ"
            else:
                status_emoji = "‚ùå"
                status_text = "Ïã§Ìå®"

            slack_data = {
                "text": f"{status_emoji} ÏúÑÎ≤ÑÏä§ Í≥ÑÏ†ï ÏùºÍ¥Ñ ÏÉùÏÑ± ÏôÑÎ£å",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": f"{status_emoji} ÏùºÍ¥Ñ ÏÉùÏÑ± {status_text}"
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": f"*Ï¥ù ÏãúÎèÑ:*\n{total_count}Í∞ú"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÏÑ±Í≥µ:*\n{success_count}Í∞ú"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*Ïã§Ìå®:*\n{failed_count}Í∞ú"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÏÑ±Í≥µÎ•†:*\n{success_rate:.1f}%"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÌôòÍ≤Ω:*\n{environment.upper()}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*ÏôÑÎ£åÏãúÍ∞Ñ:*\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            }
                        ]
                    }
                ]
            }

            success = await self._send_message(slack_data)
            if success:
                print(f"[SLACK] ÏùºÍ¥Ñ ÏÉùÏÑ± ÏöîÏïΩ ÏïåÎ¶º Î∞úÏÜ° ÏôÑÎ£å")

            return success

        except Exception as e:
            print(f"[SLACK] ÏöîÏïΩ ÏïåÎ¶º Î∞úÏÜ° Ï§ë Ïò§Î•ò: {e}")
            return False

    async def _send_message(self, slack_data: dict) -> bool:
        """Slack Î©îÏãúÏßÄ Ï†ÑÏÜ°"""
        try:
            # SSL Ïù∏Ï¶ùÏÑú Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE

            timeout = aiohttp.ClientTimeout(total=self.timeout)
            connector = aiohttp.TCPConnector(ssl=ssl_context)

            async with aiohttp.ClientSession(
                    connector=connector,
                    timeout=timeout
            ) as session:
                async with session.post(self.webhook_url, json=slack_data) as response:
                    return response.status == 200

        except Exception as e:
            print(f"[SLACK] Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®: {e}")
            return False

    def set_webhook_url(self, webhook_url: str) -> None:
        """ÏõπÌõÖ URL ÏÑ§Ï†ï"""
        self.webhook_url = webhook_url